// Generated by Dagger (https://dagger.dev).
package com.superapp.tingtongapp.composetutorial.network;

import com.superapp.tingtongapp.composetutorial.Repository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RetrofitBuilder_ProvideRepositoryFactory implements Factory<Repository> {
  private final Provider<ApiInterface> apiInterfaceProvider;

  public RetrofitBuilder_ProvideRepositoryFactory(Provider<ApiInterface> apiInterfaceProvider) {
    this.apiInterfaceProvider = apiInterfaceProvider;
  }

  @Override
  public Repository get() {
    return provideRepository(apiInterfaceProvider.get());
  }

  public static RetrofitBuilder_ProvideRepositoryFactory create(
      Provider<ApiInterface> apiInterfaceProvider) {
    return new RetrofitBuilder_ProvideRepositoryFactory(apiInterfaceProvider);
  }

  public static Repository provideRepository(ApiInterface apiInterface) {
    return Preconditions.checkNotNullFromProvides(RetrofitBuilder.INSTANCE.provideRepository(apiInterface));
  }
}
